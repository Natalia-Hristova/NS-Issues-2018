"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var image_source_1 = require("tns-core-modules/image-source");
var fs = require("file-system");
var bghttp = require("nativescript-background-http");
var session = bghttp.session("image-upload");
function navigatingTo(args) {
    console.log("navigatingTo'");
    var page = args.object;
}
exports.navigatingTo = navigatingTo;
function upload() {
    var imageSource = image_source_1.fromFile("~/images/icon.png");
    console.log(imageSource);
    var folder = fs.knownFolders.documents();
    var filePath = fs.path.join(folder.path, "Test.png");
    var saved = imageSource.saveToFile(filePath, "png");
    var request = {
        url: "https://httpbin.org/post",
        method: "POST",
        headers: {
            "Content-Type": "application/octet-stream",
            "File-Name": "someName"
        },
        description: "{ 'uploading': someFile }"
    };
    var task;
    task = session.uploadFile(filePath, request);
    task.on("progress", logEvent);
    task.on("error", logEvent);
    task.on("complete", logEvent);
    function logEvent(e) {
        console.log("currentBytes: " + e.currentBytes);
        console.log("totalBytes: " + e.totalBytes);
        console.log("eventName: " + e.eventName);
    }
}
exports.upload = upload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsOERBQXlEO0FBQ3pELGdDQUFrQztBQUVsQyxxREFBdUQ7QUFDdkQsSUFBSSxPQUFPLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUU3QyxzQkFBNkIsSUFBZTtJQUN4QyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQzVCLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7QUFDakMsQ0FBQztBQUhELG9DQUdDO0FBRUQ7SUFFSSxJQUFJLFdBQVcsR0FBRyx1QkFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUV4QixJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3pDLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDckQsSUFBSSxLQUFLLEdBQUcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFcEQsSUFBSSxPQUFPLEdBQUc7UUFDTixHQUFHLEVBQUUsMEJBQTBCO1FBQy9CLE1BQU0sRUFBRSxNQUFNO1FBQ2QsT0FBTyxFQUFFO1lBQ0wsY0FBYyxFQUFFLDBCQUEwQjtZQUMxQyxXQUFXLEVBQUUsVUFBVTtTQUMxQjtRQUNELFdBQVcsRUFBRSwyQkFBMkI7S0FDM0MsQ0FBQztJQUVOLElBQUksSUFBaUIsQ0FBQztJQUN0QixJQUFJLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFN0MsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFOUIsa0JBQWtCLENBQUM7UUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMvQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7QUFDTCxDQUFDO0FBL0JELHdCQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAndWkvcGFnZSc7XG5cbmltcG9ydCB7IGZyb21GaWxlIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvaW1hZ2Utc291cmNlXCI7XG5pbXBvcnQgKiBhcyBmcyBmcm9tIFwiZmlsZS1zeXN0ZW1cIjtcblxuaW1wb3J0ICogYXMgYmdodHRwIGZyb20gXCJuYXRpdmVzY3JpcHQtYmFja2dyb3VuZC1odHRwXCI7XG5sZXQgc2Vzc2lvbiA9IGJnaHR0cC5zZXNzaW9uKFwiaW1hZ2UtdXBsb2FkXCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGluZ1RvKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGNvbnNvbGUubG9nKFwibmF2aWdhdGluZ1RvJ1wiKVxuICAgIGxldCBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGxvYWQoKSB7XG4gICAgXG4gICAgbGV0IGltYWdlU291cmNlID0gZnJvbUZpbGUoXCJ+L2ltYWdlcy9pY29uLnBuZ1wiKTtcbiAgICBjb25zb2xlLmxvZyhpbWFnZVNvdXJjZSlcblxuICAgIGxldCBmb2xkZXIgPSBmcy5rbm93bkZvbGRlcnMuZG9jdW1lbnRzKCk7XG4gICAgbGV0IGZpbGVQYXRoID0gZnMucGF0aC5qb2luKGZvbGRlci5wYXRoLCBcIlRlc3QucG5nXCIpO1xuICAgIGxldCBzYXZlZCA9IGltYWdlU291cmNlLnNhdmVUb0ZpbGUoZmlsZVBhdGgsIFwicG5nXCIpO1xuXG4gICAgbGV0IHJlcXVlc3QgPSB7XG4gICAgICAgICAgICB1cmw6IFwiaHR0cHM6Ly9odHRwYmluLm9yZy9wb3N0XCIsXG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIsXG4gICAgICAgICAgICAgICAgXCJGaWxlLU5hbWVcIjogXCJzb21lTmFtZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwieyAndXBsb2FkaW5nJzogc29tZUZpbGUgfVwiIFxuICAgICAgICB9O1xuICAgIFxuICAgIGxldCB0YXNrOiBiZ2h0dHAuVGFzaztcbiAgICB0YXNrID0gc2Vzc2lvbi51cGxvYWRGaWxlKGZpbGVQYXRoLCByZXF1ZXN0KTtcblxuICAgIHRhc2sub24oXCJwcm9ncmVzc1wiLCBsb2dFdmVudCk7XG4gICAgdGFzay5vbihcImVycm9yXCIsIGxvZ0V2ZW50KTtcbiAgICB0YXNrLm9uKFwiY29tcGxldGVcIiwgbG9nRXZlbnQpO1xuXG4gICAgZnVuY3Rpb24gbG9nRXZlbnQoZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcImN1cnJlbnRCeXRlczogXCIgKyBlLmN1cnJlbnRCeXRlcyk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwidG90YWxCeXRlczogXCIgKyBlLnRvdGFsQnl0ZXMpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImV2ZW50TmFtZTogXCIgKyBlLmV2ZW50TmFtZSk7XG4gICAgfVxufVxuXG4iXX0=