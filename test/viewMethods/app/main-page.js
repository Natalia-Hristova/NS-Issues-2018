"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var main_view_model_1 = require("./main-view-model");
function navigatingTo(args) {
    var page = args.object;
    page.bindingContext = new main_view_model_1.HelloWorldModel();
}
exports.navigatingTo = navigatingTo;
function onNavigatedTo(args) {
    var page = args.object;
    var stack = page.getViewById("myStack");
    var label = stack.getViewById("myLabel");
    console.log(stack); // StackLayout<myStack>@file:///app/main-page.xml:2:5;
    console.log(label); // Label<myLabel>@file:///app/main-page.xml:5:9;
    var stackSize = stack.getActualSize();
    var stackWidth = stackSize.width; // e.g. 411.42857142857144 DP
    var stackHeight = stackSize.height; // e.g. 603.4285714285714 DP
    console.log("Actual stack size in device independent pixels: height: " + stackHeight + " width:" + stackWidth);
    var locationInWindow = stack.getLocationInWindow();
    var locWindowX = locationInWindow.x;
    var locWindowY = locationInWindow.y;
    console.log("locWindowX: " + locWindowX);
    console.log("locWindowY: " + locWindowY);
    var locationOnScreen = stack.getLocationOnScreen();
    var locScreenX = locationOnScreen.x;
    var locScreenY = locationOnScreen.y;
    console.log(locationOnScreen.x);
    console.log(locationOnScreen.y);
    var labelLocationRelativeToStack = label.getLocationRelativeTo(stack);
    var labelRelativeX = labelLocationRelativeToStack.x;
    var labelRelativeY = labelLocationRelativeToStack.y;
    console.log(labelLocationRelativeToStack.x);
    console.log(labelLocationRelativeToStack.y);


    console.log(stack.getMeasuredHeight());
    console.log(stack.getMeasuredState());
    console.log(stack.getMeasuredWidth());
}
exports.onNavigatedTo = onNavigatedTo;
function onStackLoaded(args) {
    // let stack = <StackLayout>args.object;
    // let label = <Label>stack.getViewById("myLabel");
    // console.log(stack);
    // setTimeout(() => {
    //     let stackSizeDP = stack.getActualSize();
    //     console.log("Actual stack size in device independent pixels: height: " + stackSizeDP.height + " width:" + stackSizeDP.width);
    //     console.log(label.getLocationRelativeTo(stack).x);
    //     console.log(label.getLocationRelativeTo(stack).y);
    //     console.log(stack.getMeasuredHeight());
    //     console.log(stack.getMeasuredState());
    //     console.log(stack.getMeasuredWidth());
    // }, 100);
    // console.log(stack.getLocationInWindow().x);
    // console.log(stack.getLocationInWindow().y);
    // console.log(stack.getLocationOnScreen().x);
    // console.log(stack.getLocationOnScreen().y);
    // console.log(label.getLocationRelativeTo(stack).x);
    // console.log(label.getLocationRelativeTo(stack).y);
}
exports.onStackLoaded = onStackLoaded;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EscURBQW9EO0FBRXBELHNCQUE2QixJQUFlO0lBQ3hDLElBQUksSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDN0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLGlDQUFlLEVBQUUsQ0FBQztBQUNoRCxDQUFDO0FBSEQsb0NBR0M7QUFFRCx1QkFBOEIsSUFBZTtJQUN6QyxJQUFJLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzdCLElBQUksS0FBSyxHQUFnQixJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3JELElBQUksS0FBSyxHQUFVLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFaEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLHNEQUFzRDtJQUMxRSxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0RBQWdEO0lBRXBFLElBQUksU0FBUyxHQUFTLEtBQUssQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM1QyxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsNkJBQTZCO0lBQy9ELElBQUksV0FBVyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyw0QkFBNEI7SUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQywwREFBMEQsR0FBRyxXQUFXLEdBQUcsU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDO0lBRS9HLElBQUksZ0JBQWdCLEdBQVUsS0FBSyxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDMUQsSUFBSSxVQUFVLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ3BDLElBQUksVUFBVSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsQ0FBQztJQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsR0FBRyxVQUFVLENBQUMsQ0FBQztJQUV6QyxJQUFJLGdCQUFnQixHQUFXLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzNELElBQUksVUFBVSxHQUFHLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUNwQyxJQUFJLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFFcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWhDLElBQUksNEJBQTRCLEdBQVUsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdFLElBQUksY0FBYyxHQUFHLDRCQUE0QixDQUFDLENBQUMsQ0FBQztJQUNwRCxJQUFJLGNBQWMsR0FBRyw0QkFBNEIsQ0FBQyxDQUFDLENBQUM7SUFDcEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRTVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQztJQUN2QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFDdEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0FBQzFDLENBQUM7QUFuQ0Qsc0NBbUNDO0FBRUQsdUJBQThCLElBQWU7SUFDekMsd0NBQXdDO0lBQ3hDLG1EQUFtRDtJQUVuRCxzQkFBc0I7SUFFdEIscUJBQXFCO0lBQ3JCLCtDQUErQztJQUMvQyxvSUFBb0k7SUFFcEkseURBQXlEO0lBQ3pELHlEQUF5RDtJQUV6RCw4Q0FBOEM7SUFDOUMsNkNBQTZDO0lBQzdDLDZDQUE2QztJQUM3QyxXQUFXO0lBRVgsOENBQThDO0lBQzlDLDhDQUE4QztJQUU5Qyw4Q0FBOEM7SUFDOUMsOENBQThDO0lBRTlDLHFEQUFxRDtJQUNyRCxxREFBcUQ7QUFHekQsQ0FBQztBQTVCRCxzQ0E0QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICd1aS9sYWJlbCc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAndWkvcGFnZSc7XG5pbXBvcnQgeyBTaXplLCBQb2ludCB9IGZyb20gXCJ1aS9jb3JlL3ZpZXdcIjtcbmltcG9ydCB7IFN0YWNrTGF5b3V0IH0gZnJvbSAndWkvbGF5b3V0cy9zdGFjay1sYXlvdXQnO1xuaW1wb3J0IHsgSGVsbG9Xb3JsZE1vZGVsIH0gZnJvbSAnLi9tYWluLXZpZXctbW9kZWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGluZ1RvKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIGxldCBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyBIZWxsb1dvcmxkTW9kZWwoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uTmF2aWdhdGVkVG8oYXJnczogRXZlbnREYXRhKSB7XG4gICAgbGV0IHBhZ2UgPSA8UGFnZT5hcmdzLm9iamVjdDtcbiAgICBsZXQgc3RhY2sgPSA8U3RhY2tMYXlvdXQ+cGFnZS5nZXRWaWV3QnlJZChcIm15U3RhY2tcIik7XG4gICAgbGV0IGxhYmVsID0gPExhYmVsPnN0YWNrLmdldFZpZXdCeUlkKFwibXlMYWJlbFwiKTtcblxuICAgIGNvbnNvbGUubG9nKHN0YWNrKTsgLy8gU3RhY2tMYXlvdXQ8bXlTdGFjaz5AZmlsZTovLy9hcHAvbWFpbi1wYWdlLnhtbDoyOjU7XG4gICAgY29uc29sZS5sb2cobGFiZWwpOyAvLyBMYWJlbDxteUxhYmVsPkBmaWxlOi8vL2FwcC9tYWluLXBhZ2UueG1sOjU6OTtcblxuICAgIGxldCBzdGFja1NpemU6IFNpemUgPSBzdGFjay5nZXRBY3R1YWxTaXplKCk7XG4gICAgbGV0IHN0YWNrV2lkdGggPSBzdGFja1NpemUud2lkdGg7IC8vIGUuZy4gNDExLjQyODU3MTQyODU3MTQ0IERQXG4gICAgbGV0IHN0YWNrSGVpZ2h0ID0gc3RhY2tTaXplLmhlaWdodDsgLy8gZS5nLiA2MDMuNDI4NTcxNDI4NTcxNCBEUFxuICAgIGNvbnNvbGUubG9nKFwiQWN0dWFsIHN0YWNrIHNpemUgaW4gZGV2aWNlIGluZGVwZW5kZW50IHBpeGVsczogaGVpZ2h0OiBcIiArIHN0YWNrSGVpZ2h0ICsgXCIgd2lkdGg6XCIgKyBzdGFja1dpZHRoKTtcblxuICAgIGxldCBsb2NhdGlvbkluV2luZG93OiBQb2ludCA9IHN0YWNrLmdldExvY2F0aW9uSW5XaW5kb3coKTtcbiAgICBsZXQgbG9jV2luZG93WCA9IGxvY2F0aW9uSW5XaW5kb3cueDtcbiAgICBsZXQgbG9jV2luZG93WSA9IGxvY2F0aW9uSW5XaW5kb3cueTtcbiAgICBjb25zb2xlLmxvZyhcImxvY1dpbmRvd1g6IFwiICsgbG9jV2luZG93WCk7XG4gICAgY29uc29sZS5sb2coXCJsb2NXaW5kb3dZOiBcIiArIGxvY1dpbmRvd1kpO1xuXG4gICAgbGV0IGxvY2F0aW9uT25TY3JlZW4gOiBQb2ludCA9IHN0YWNrLmdldExvY2F0aW9uT25TY3JlZW4oKTtcbiAgICBsZXQgbG9jU2NyZWVuWCA9IGxvY2F0aW9uT25TY3JlZW4ueDtcbiAgICBsZXQgbG9jU2NyZWVuWSA9IGxvY2F0aW9uT25TY3JlZW4ueTtcblxuICAgIGNvbnNvbGUubG9nKGxvY2F0aW9uT25TY3JlZW4ueCk7XG4gICAgY29uc29sZS5sb2cobG9jYXRpb25PblNjcmVlbi55KTtcblxuICAgIGxldCBsYWJlbExvY2F0aW9uUmVsYXRpdmVUb1N0YWNrOiBQb2ludCA9IGxhYmVsLmdldExvY2F0aW9uUmVsYXRpdmVUbyhzdGFjayk7XG4gICAgbGV0IGxhYmVsUmVsYXRpdmVYID0gbGFiZWxMb2NhdGlvblJlbGF0aXZlVG9TdGFjay54O1xuICAgIGxldCBsYWJlbFJlbGF0aXZlWSA9IGxhYmVsTG9jYXRpb25SZWxhdGl2ZVRvU3RhY2sueTtcbiAgICBjb25zb2xlLmxvZyhsYWJlbExvY2F0aW9uUmVsYXRpdmVUb1N0YWNrLngpO1xuICAgIGNvbnNvbGUubG9nKGxhYmVsTG9jYXRpb25SZWxhdGl2ZVRvU3RhY2sueSk7XG5cbiAgICBjb25zb2xlLmxvZyhzdGFjay5nZXRNZWFzdXJlZEhlaWdodCgpKTtcbiAgICBjb25zb2xlLmxvZyhzdGFjay5nZXRNZWFzdXJlZFN0YXRlKCkpO1xuICAgIGNvbnNvbGUubG9nKHN0YWNrLmdldE1lYXN1cmVkV2lkdGgoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblN0YWNrTG9hZGVkKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIC8vIGxldCBzdGFjayA9IDxTdGFja0xheW91dD5hcmdzLm9iamVjdDtcbiAgICAvLyBsZXQgbGFiZWwgPSA8TGFiZWw+c3RhY2suZ2V0Vmlld0J5SWQoXCJteUxhYmVsXCIpO1xuXG4gICAgLy8gY29uc29sZS5sb2coc3RhY2spO1xuXG4gICAgLy8gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgLy8gICAgIGxldCBzdGFja1NpemVEUCA9IHN0YWNrLmdldEFjdHVhbFNpemUoKTtcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCJBY3R1YWwgc3RhY2sgc2l6ZSBpbiBkZXZpY2UgaW5kZXBlbmRlbnQgcGl4ZWxzOiBoZWlnaHQ6IFwiICsgc3RhY2tTaXplRFAuaGVpZ2h0ICsgXCIgd2lkdGg6XCIgKyBzdGFja1NpemVEUC53aWR0aCk7XG5cbiAgICAvLyAgICAgY29uc29sZS5sb2cobGFiZWwuZ2V0TG9jYXRpb25SZWxhdGl2ZVRvKHN0YWNrKS54KTtcbiAgICAvLyAgICAgY29uc29sZS5sb2cobGFiZWwuZ2V0TG9jYXRpb25SZWxhdGl2ZVRvKHN0YWNrKS55KTtcblxuICAgIC8vICAgICBjb25zb2xlLmxvZyhzdGFjay5nZXRNZWFzdXJlZEhlaWdodCgpKTtcbiAgICAvLyAgICAgY29uc29sZS5sb2coc3RhY2suZ2V0TWVhc3VyZWRTdGF0ZSgpKTtcbiAgICAvLyAgICAgY29uc29sZS5sb2coc3RhY2suZ2V0TWVhc3VyZWRXaWR0aCgpKTtcbiAgICAvLyB9LCAxMDApO1xuXG4gICAgLy8gY29uc29sZS5sb2coc3RhY2suZ2V0TG9jYXRpb25JbldpbmRvdygpLngpO1xuICAgIC8vIGNvbnNvbGUubG9nKHN0YWNrLmdldExvY2F0aW9uSW5XaW5kb3coKS55KTtcblxuICAgIC8vIGNvbnNvbGUubG9nKHN0YWNrLmdldExvY2F0aW9uT25TY3JlZW4oKS54KTtcbiAgICAvLyBjb25zb2xlLmxvZyhzdGFjay5nZXRMb2NhdGlvbk9uU2NyZWVuKCkueSk7XG5cbiAgICAvLyBjb25zb2xlLmxvZyhsYWJlbC5nZXRMb2NhdGlvblJlbGF0aXZlVG8oc3RhY2spLngpO1xuICAgIC8vIGNvbnNvbGUubG9nKGxhYmVsLmdldExvY2F0aW9uUmVsYXRpdmVUbyhzdGFjaykueSk7XG5cbiAgICBcbn0iXX0=