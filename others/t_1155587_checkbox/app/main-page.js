"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var nativescript_checkbox_1 = require("nativescript-checkbox");
var observable_1 = require("tns-core-modules/data/observable");
var frame_1 = require("tns-core-modules/ui/frame");
function pageLoaded(args) {
    var page = args.object;
    var vm = new observable_1.Observable();
    vm.set("checkProp", true);
    vm.set("myCheckText", "check me out");
    vm.set("myCheckColor", "red");
    page.bindingContext = vm;
}
exports.pageLoaded = pageLoaded;
function onAdd() {
    var stack = frame_1.topmost().getViewById('stack');
    var newCheckBox = createNewCheckBox();
    stack.addChild(newCheckBox);
}
exports.onAdd = onAdd;
function createNewCheckBox() {
    // <CheckBox:CheckBox checked="{{ checkProp }}" text="{{ myCheckText }}" fillColor="{{ myCheckColor }}" id="myCheckbox" />
    var checkBox = new nativescript_checkbox_1.CheckBox();
    checkBox.checked = true;
    checkBox.text = "New CheckBox";
    checkBox.fillColor = "orange";
    checkBox.on("checkedChange", function (args) {
        console.log("On checkedChange");
        console.log("checked: " + args.value);
    });
    return checkBox;
}
exports.createNewCheckBox = createNewCheckBox;
function toggleCheck() {
    var checkBox = frame_1.topmost().getViewById('myCheckbox');
    checkBox.toggle();
    getCheckProp();
}
exports.toggleCheck = toggleCheck;
function getCheckProp() {
    var checkBox = frame_1.topmost().getViewById('myCheckbox');
    console.log('checked prop value = ' + checkBox.checked);
}
exports.getCheckProp = getCheckProp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQW9FO0FBQ3BFLCtEQUF5RTtBQUN6RSxtREFBb0Q7QUFJcEQsb0JBQTJCLElBQWU7SUFDdEMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUU3QixJQUFJLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztJQUMxQixFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQTtJQUN6QixFQUFFLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN0QyxFQUFFLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUU5QixJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBVEQsZ0NBU0M7QUFFRDtJQUNJLElBQUksS0FBSyxHQUFlLGVBQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUV2RCxJQUFJLFdBQVcsR0FBRyxpQkFBaUIsRUFBRSxDQUFDO0lBRXRDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUE7QUFDL0IsQ0FBQztBQU5ELHNCQU1DO0FBRUQ7SUFDSSwwSEFBMEg7SUFDMUgsSUFBSSxRQUFRLEdBQVMsSUFBSSxnQ0FBUSxFQUFFLENBQUM7SUFDcEMsUUFBUSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDeEIsUUFBUSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUM7SUFDL0IsUUFBUSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFFOUIsUUFBUSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsVUFBQyxJQUFJO1FBQzlCLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQyxDQUFDLENBQUE7SUFFRixNQUFNLENBQUMsUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFiRCw4Q0FhQztBQUVEO0lBQ0ksSUFBSSxRQUFRLEdBQWEsZUFBTyxFQUFFLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdELFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUVsQixZQUFZLEVBQUUsQ0FBQztBQUNuQixDQUFDO0FBTEQsa0NBS0M7QUFFRDtJQUNJLElBQUksUUFBUSxHQUFhLGVBQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM3RCxPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBSEQsb0NBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGVja0JveCwgQ2hlY2tCb3hJbnRlcmZhY2UgfSBmcm9tICduYXRpdmVzY3JpcHQtY2hlY2tib3gnO1xuaW1wb3J0IHsgRXZlbnREYXRhLCBPYnNlcnZhYmxlIH0gZnJvbSAndG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgdG9wbW9zdCB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvZnJhbWUnO1xuaW1wb3J0IHsgU3RhY2tMYXlvdXQgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL2xheW91dHMvc3RhY2stbGF5b3V0JztcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICd0bnMtY29yZS1tb2R1bGVzL3VpL3BhZ2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFnZUxvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcbiAgICBsZXQgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xuXG4gICAgbGV0IHZtID0gbmV3IE9ic2VydmFibGUoKTtcbiAgICB2bS5zZXQoXCJjaGVja1Byb3BcIiwgdHJ1ZSlcbiAgICB2bS5zZXQoXCJteUNoZWNrVGV4dFwiLCBcImNoZWNrIG1lIG91dFwiKTtcbiAgICB2bS5zZXQoXCJteUNoZWNrQ29sb3JcIiwgXCJyZWRcIik7XG5cbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkFkZCgpIHtcbiAgICBsZXQgc3RhY2s9IDxTdGFja0xheW91dD50b3Btb3N0KCkuZ2V0Vmlld0J5SWQoJ3N0YWNrJyk7XG5cbiAgICBsZXQgbmV3Q2hlY2tCb3ggPSBjcmVhdGVOZXdDaGVja0JveCgpO1xuXG4gICAgc3RhY2suYWRkQ2hpbGQobmV3Q2hlY2tCb3gpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdDaGVja0JveCgpIHtcbiAgICAvLyA8Q2hlY2tCb3g6Q2hlY2tCb3ggY2hlY2tlZD1cInt7IGNoZWNrUHJvcCB9fVwiIHRleHQ9XCJ7eyBteUNoZWNrVGV4dCB9fVwiIGZpbGxDb2xvcj1cInt7IG15Q2hlY2tDb2xvciB9fVwiIGlkPVwibXlDaGVja2JveFwiIC8+XG4gICAgbGV0IGNoZWNrQm94IDogYW55ID0gbmV3IENoZWNrQm94KCk7XG4gICAgY2hlY2tCb3guY2hlY2tlZCA9IHRydWU7XG4gICAgY2hlY2tCb3gudGV4dCA9IFwiTmV3IENoZWNrQm94XCI7XG4gICAgY2hlY2tCb3guZmlsbENvbG9yID0gXCJvcmFuZ2VcIjtcblxuICAgIGNoZWNrQm94Lm9uKFwiY2hlY2tlZENoYW5nZVwiLCAoYXJncykgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk9uIGNoZWNrZWRDaGFuZ2VcIilcbiAgICAgICAgY29uc29sZS5sb2coXCJjaGVja2VkOiBcIiArIGFyZ3MudmFsdWUpO1xuICAgIH0pXG5cbiAgICByZXR1cm4gY2hlY2tCb3g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVDaGVjaygpIHtcbiAgICBsZXQgY2hlY2tCb3ggPSA8Q2hlY2tCb3g+dG9wbW9zdCgpLmdldFZpZXdCeUlkKCdteUNoZWNrYm94Jyk7XG4gICAgY2hlY2tCb3gudG9nZ2xlKCk7XG5cbiAgICBnZXRDaGVja1Byb3AoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoZWNrUHJvcCgpIHtcbiAgICBsZXQgY2hlY2tCb3ggPSA8Q2hlY2tCb3g+dG9wbW9zdCgpLmdldFZpZXdCeUlkKCdteUNoZWNrYm94Jyk7XG4gICAgY29uc29sZS5sb2coJ2NoZWNrZWQgcHJvcCB2YWx1ZSA9ICcgKyBjaGVja0JveC5jaGVja2VkKTtcbn1cbiJdfQ==