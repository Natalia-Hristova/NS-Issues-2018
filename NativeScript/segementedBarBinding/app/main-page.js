"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("data/observable");
var segmented_bar_1 = require("ui/segmented-bar");
var vm = new observable_1.Observable();
// Event handler for Page "navigatingTo" event attached in main-page.xml
function navigatingTo(args) {
    var page = args.object;
    vm.set("segmentedBarItems", createBarItems());
    vm.set("isItemVisible", true);
    page.bindingContext = vm;
}
exports.navigatingTo = navigatingTo;
function onSegmentedBarLoaded(args) {
    var segmetedBar = args.object;
    segmetedBar.on("selectedIndexChange", function (args) {
        switch (segmetedBar.selectedIndex) {
            case 0:
                console.log("segmetedBar.selectedIndex: ", segmetedBar.selectedIndex);
                vm.set("isItemVisible", true);
                break;
            case 1:
                console.log("segmetedBar.selectedIndex: ", segmetedBar.selectedIndex);
                vm.set("isItemVisible", false);
                break;
            default:
                console.log("DEFFFF");
                break;
        }
    });
}
exports.onSegmentedBarLoaded = onSegmentedBarLoaded;
function toggle() {
    vm.set("isItemVisible", !vm.get("isItemVisible"));
}
exports.toggle = toggle;
function createBarItems() {
    var segmentedBarItems = [];
    var tab1 = new segmented_bar_1.SegmentedBarItem();
    tab1.title = "Bar 1";
    var tab2 = new segmented_bar_1.SegmentedBarItem();
    tab2.title = "Bar >>> 2 <<<";
    segmentedBarItems.push(tab1);
    segmentedBarItems.push(tab2);
    return segmentedBarItems;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOENBQXdEO0FBRXhELGtEQUFrRTtBQUVsRSxJQUFNLEVBQUUsR0FBRyxJQUFJLHVCQUFVLEVBQUUsQ0FBQztBQUU1Qix3RUFBd0U7QUFDeEUsc0JBQTZCLElBQWU7SUFFeEMsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUU3QixFQUFFLENBQUMsR0FBRyxDQUFDLG1CQUFtQixFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDOUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFFOUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7QUFDN0IsQ0FBQztBQVJELG9DQVFDO0FBRUQsOEJBQXFDLElBQUk7SUFDckMsSUFBTSxXQUFXLEdBQWlCLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFOUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSxVQUFDLElBQVM7UUFFNUMsTUFBTSxDQUFDLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDaEMsS0FBSyxDQUFDO2dCQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEVBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUN0RSxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDOUIsS0FBSyxDQUFDO1lBQ1YsS0FBSyxDQUFDO2dCQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEVBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUN0RSxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztnQkFDL0IsS0FBSyxDQUFDO1lBQ1Y7Z0JBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtnQkFDckIsS0FBSyxDQUFDO1FBQ2QsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQztBQW5CRCxvREFtQkM7QUFFRDtJQUNJLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCx3QkFFQztBQUVEO0lBQ0ksSUFBSSxpQkFBaUIsR0FBRyxFQUFFLENBQUM7SUFDM0IsSUFBSSxJQUFJLEdBQXFCLElBQUksZ0NBQWdCLEVBQUUsQ0FBQztJQUNwRCxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztJQUVyQixJQUFJLElBQUksR0FBcUIsSUFBSSxnQ0FBZ0IsRUFBRSxDQUFDO0lBQ3BELElBQUksQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDO0lBRTdCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFN0IsTUFBTSxDQUFDLGlCQUFpQixDQUFDO0FBQzdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERhdGEsIE9ic2VydmFibGUgfSBmcm9tICdkYXRhL29ic2VydmFibGUnO1xuaW1wb3J0IHsgUGFnZSB9IGZyb20gJ3VpL3BhZ2UnO1xuaW1wb3J0IHsgU2VnbWVudGVkQmFyLCBTZWdtZW50ZWRCYXJJdGVtIH0gZnJvbSBcInVpL3NlZ21lbnRlZC1iYXJcIjtcblxuY29uc3Qgdm0gPSBuZXcgT2JzZXJ2YWJsZSgpO1xuXG4vLyBFdmVudCBoYW5kbGVyIGZvciBQYWdlIFwibmF2aWdhdGluZ1RvXCIgZXZlbnQgYXR0YWNoZWQgaW4gbWFpbi1wYWdlLnhtbFxuZXhwb3J0IGZ1bmN0aW9uIG5hdmlnYXRpbmdUbyhhcmdzOiBFdmVudERhdGEpIHtcblxuICAgIGxldCBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG5cbiAgICB2bS5zZXQoXCJzZWdtZW50ZWRCYXJJdGVtc1wiLCBjcmVhdGVCYXJJdGVtcygpKTtcbiAgICB2bS5zZXQoXCJpc0l0ZW1WaXNpYmxlXCIsIHRydWUpO1xuXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25TZWdtZW50ZWRCYXJMb2FkZWQoYXJncykge1xuICAgIGNvbnN0IHNlZ21ldGVkQmFyID0gPFNlZ21lbnRlZEJhcj5hcmdzLm9iamVjdDtcblxuICAgIHNlZ21ldGVkQmFyLm9uKFwic2VsZWN0ZWRJbmRleENoYW5nZVwiLCAoYXJnczogYW55KSA9PiB7XG4gICAgICAgICAgICBcbiAgICAgICAgc3dpdGNoIChzZWdtZXRlZEJhci5zZWxlY3RlZEluZGV4KSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzZWdtZXRlZEJhci5zZWxlY3RlZEluZGV4OiBcIiwgc2VnbWV0ZWRCYXIuc2VsZWN0ZWRJbmRleCk7XG4gICAgICAgICAgICAgICAgdm0uc2V0KFwiaXNJdGVtVmlzaWJsZVwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcInNlZ21ldGVkQmFyLnNlbGVjdGVkSW5kZXg6IFwiLCBzZWdtZXRlZEJhci5zZWxlY3RlZEluZGV4KTtcbiAgICAgICAgICAgICAgICB2bS5zZXQoXCJpc0l0ZW1WaXNpYmxlXCIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJERUZGRkZcIilcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0pXG59IFxuXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlKCkge1xuICAgIHZtLnNldChcImlzSXRlbVZpc2libGVcIiwgIXZtLmdldChcImlzSXRlbVZpc2libGVcIikpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVCYXJJdGVtcygpIHtcbiAgICBsZXQgc2VnbWVudGVkQmFySXRlbXMgPSBbXTtcbiAgICBsZXQgdGFiMSA9IDxTZWdtZW50ZWRCYXJJdGVtPm5ldyBTZWdtZW50ZWRCYXJJdGVtKCk7XG4gICAgdGFiMS50aXRsZSA9IFwiQmFyIDFcIjtcblxuICAgIGxldCB0YWIyID0gPFNlZ21lbnRlZEJhckl0ZW0+bmV3IFNlZ21lbnRlZEJhckl0ZW0oKTtcbiAgICB0YWIyLnRpdGxlID0gXCJCYXIgPj4+IDIgPDw8XCI7XG5cbiAgICBzZWdtZW50ZWRCYXJJdGVtcy5wdXNoKHRhYjEpO1xuICAgIHNlZ21lbnRlZEJhckl0ZW1zLnB1c2godGFiMik7XG5cbiAgICByZXR1cm4gc2VnbWVudGVkQmFySXRlbXM7XG59Il19